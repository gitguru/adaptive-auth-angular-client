import { Injectable } from '@angular/core';
import { DEMO_SERVER_BASE_URL } from '../../app.constants';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { LocalService } from './local-service';
import { TOTP } from '../util/totp-generator';
import { Base32 } from '../util/base32';

@Injectable({
    providedIn: 'root'
})
export class TotpService {
    private demoServerBaseUrl = DEMO_SERVER_BASE_URL;

    constructor(
        private localService: LocalService, 
        private http: HttpClient) { }

    getClientId(): string {
        return this.localService.getData('clientId') || 'abc';
    }

    /**
     * Generate a Totp token for current Api Client
     */
    getSelfTotpToken(): Promise<any> {
        // Keys provided must be base32 strings, ie. only containing characters matching (A-Z, 2-7, =).
        const base32 = new Base32();
        const base32_encoded = base32.encode(this.getClientId());
        return TOTP.generate(base32_encoded as string);
    }

    /**
     * Obtain a Totp token generated by Adaptive Auth Server for current Api Client
     * @param transactionId - Current adaptive transaction id
     * @returns Observable response from Adaptive Auth Server
     * 
     * TODO: we could move this to DemoServerApiService (future task)
     */
    getServerTotpToken(transactionId: string): Observable<any> {
        const headers = new HttpHeaders()
        .set('Accept', 'application/json')
        .set('X-API-Dynamics-Client-Id', this.localService.getData("clientId") || '');

        return this.http.get<any>(`${this.demoServerBaseUrl}/adaptiveAuthentication/generateClientTotp?tid=${transactionId}`, 
            { 
                headers: headers,
                observe: 'response' as 'body', 
                responseType: 'json' as 'json'
            });
    }

}