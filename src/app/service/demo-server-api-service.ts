import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { LocalService } from './local-service';
import { IpService } from './ip-service';

@Injectable({
    providedIn: 'root'
})
export class DemoServerApiService {
    // private DEMO_SERVER_BASE_URL: string = "https://java-server-demo.dev.sevenhills.ai"
    private DEMO_SERVER_BASE_URL: string = "/proxy"

    constructor(private http: HttpClient, private localService: LocalService, private ipService: IpService) { }

    /**
     * Get current client Ip address
     * @returns Observable resopnse from IP address request or IP address from local storage
     */
    getIp(): Observable<any> {
        if (this.localService.isEmpty('remote_addr')) {
            return this.ipService.getIp();
        } else {
            return of(this.localService.getData('remote_addr'));
        }
    }

    /**
     * Request a simple timestamp from Api Server
     * @param ip Required to obtain Api Client geo location data
     * @returns Observable response from Api Server
     */
    requestTimestamp(ip: string): Observable<any> {
        const headers = new HttpHeaders()
        .set('Accept', 'application/json')
        .set('Remote_Addr', ip)
        .set('X-API-Dynamics-Client-Id', this.localService.getData("clientId") || '');
        
        return this.http.get<any>(`${this.DEMO_SERVER_BASE_URL}/api/timestamp`, 
            { 
                headers: headers,
                observe: 'response' as 'body', 
                responseType: 'json' as 'json'
            });
    }

    /**
     * Chain call to fetch client IP address and then, timestamp from API Server
     * @returns Observable response from timestamp request
     */
    getTimestamp(): Observable<any> {
        // return this.getIp().pipe(mergeMap((ip: string) => this.fetchTimestamp(ip)));
        return this.getIp().pipe(mergeMap((ip: string) => {
            this.localService.saveData('remote_addr', ip);
            return this.requestTimestamp(ip);
        }));
    }

    /**
     * Validates a Totp token generated by Api Client or by Adaptive Auth Server
     * @param transactionId - Current adaptive transaction id
     * @param totp - Totp token to validate
     * @returns Observable response from Adaptive Auth Server
     */
    validateClientTotp(transactionId: string, totp: string): Observable<any> {
        const headers = new HttpHeaders()
        .set('Accept', 'application/json')
        .set('X-API-Dynamics-Client-Id', this.localService.getData("clientId") || '');

        return this.http.get<any>(`${this.DEMO_SERVER_BASE_URL}/adaptiveAuthentication/validateClientTotp?tid=${transactionId}&totp=${totp}`, 
            { 
                headers: headers,
                observe: 'response' as 'body', 
                responseType: 'json' as 'json'
            });
    }

}